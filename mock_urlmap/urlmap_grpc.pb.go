// Code generated by MockGen. DO NOT EDIT.
// Source: pb/urlmap_grpc.pb.go

// Package mock_urlmap is a generated GoMock package.
package mock_urlmap

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/shin5ok/urlmap-api/pb"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockRedirectionClient is a mock of RedirectionClient interface.
type MockRedirectionClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectionClientMockRecorder
}

// MockRedirectionClientMockRecorder is the mock recorder for MockRedirectionClient.
type MockRedirectionClientMockRecorder struct {
	mock *MockRedirectionClient
}

// NewMockRedirectionClient creates a new mock instance.
func NewMockRedirectionClient(ctrl *gomock.Controller) *MockRedirectionClient {
	mock := &MockRedirectionClient{ctrl: ctrl}
	mock.recorder = &MockRedirectionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectionClient) EXPECT() *MockRedirectionClientMockRecorder {
	return m.recorder
}

// GetInfoByUser mocks base method.
func (m *MockRedirectionClient) GetInfoByUser(ctx context.Context, in *pb.User, opts ...grpc.CallOption) (*pb.ArrayRedirectData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetInfoByUser", varargs...)
	ret0, _ := ret[0].(*pb.ArrayRedirectData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoByUser indicates an expected call of GetInfoByUser.
func (mr *MockRedirectionClientMockRecorder) GetInfoByUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoByUser", reflect.TypeOf((*MockRedirectionClient)(nil).GetInfoByUser), varargs...)
}

// GetOrgByPath mocks base method.
func (m *MockRedirectionClient) GetOrgByPath(ctx context.Context, in *pb.RedirectPath, opts ...grpc.CallOption) (*pb.OrgUrl, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrgByPath", varargs...)
	ret0, _ := ret[0].(*pb.OrgUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgByPath indicates an expected call of GetOrgByPath.
func (mr *MockRedirectionClientMockRecorder) GetOrgByPath(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgByPath", reflect.TypeOf((*MockRedirectionClient)(nil).GetOrgByPath), varargs...)
}

// ListUsers mocks base method.
func (m *MockRedirectionClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.Users, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsers", varargs...)
	ret0, _ := ret[0].(*pb.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockRedirectionClientMockRecorder) ListUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockRedirectionClient)(nil).ListUsers), varargs...)
}

// PingPongMessage mocks base method.
func (m *MockRedirectionClient) PingPongMessage(ctx context.Context, in *pb.Message, opts ...grpc.CallOption) (*pb.Message, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PingPongMessage", varargs...)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPongMessage indicates an expected call of PingPongMessage.
func (mr *MockRedirectionClientMockRecorder) PingPongMessage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPongMessage", reflect.TypeOf((*MockRedirectionClient)(nil).PingPongMessage), varargs...)
}

// RemoveUser mocks base method.
func (m *MockRedirectionClient) RemoveUser(ctx context.Context, in *pb.User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveUser", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockRedirectionClientMockRecorder) RemoveUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockRedirectionClient)(nil).RemoveUser), varargs...)
}

// SetInfo mocks base method.
func (m *MockRedirectionClient) SetInfo(ctx context.Context, in *pb.RedirectData, opts ...grpc.CallOption) (*pb.OrgUrl, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetInfo", varargs...)
	ret0, _ := ret[0].(*pb.OrgUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockRedirectionClientMockRecorder) SetInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockRedirectionClient)(nil).SetInfo), varargs...)
}

// SetUser mocks base method.
func (m *MockRedirectionClient) SetUser(ctx context.Context, in *pb.User, opts ...grpc.CallOption) (*pb.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetUser", varargs...)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockRedirectionClientMockRecorder) SetUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockRedirectionClient)(nil).SetUser), varargs...)
}

// MockRedirectionServer is a mock of RedirectionServer interface.
type MockRedirectionServer struct {
	ctrl     *gomock.Controller
	recorder *MockRedirectionServerMockRecorder
}

// MockRedirectionServerMockRecorder is the mock recorder for MockRedirectionServer.
type MockRedirectionServerMockRecorder struct {
	mock *MockRedirectionServer
}

// NewMockRedirectionServer creates a new mock instance.
func NewMockRedirectionServer(ctrl *gomock.Controller) *MockRedirectionServer {
	mock := &MockRedirectionServer{ctrl: ctrl}
	mock.recorder = &MockRedirectionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedirectionServer) EXPECT() *MockRedirectionServerMockRecorder {
	return m.recorder
}

// GetInfoByUser mocks base method.
func (m *MockRedirectionServer) GetInfoByUser(arg0 context.Context, arg1 *pb.User) (*pb.ArrayRedirectData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfoByUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.ArrayRedirectData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfoByUser indicates an expected call of GetInfoByUser.
func (mr *MockRedirectionServerMockRecorder) GetInfoByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfoByUser", reflect.TypeOf((*MockRedirectionServer)(nil).GetInfoByUser), arg0, arg1)
}

// GetOrgByPath mocks base method.
func (m *MockRedirectionServer) GetOrgByPath(arg0 context.Context, arg1 *pb.RedirectPath) (*pb.OrgUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgByPath", arg0, arg1)
	ret0, _ := ret[0].(*pb.OrgUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgByPath indicates an expected call of GetOrgByPath.
func (mr *MockRedirectionServerMockRecorder) GetOrgByPath(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgByPath", reflect.TypeOf((*MockRedirectionServer)(nil).GetOrgByPath), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockRedirectionServer) ListUsers(arg0 context.Context, arg1 *emptypb.Empty) (*pb.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].(*pb.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockRedirectionServerMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockRedirectionServer)(nil).ListUsers), arg0, arg1)
}

// PingPongMessage mocks base method.
func (m *MockRedirectionServer) PingPongMessage(arg0 context.Context, arg1 *pb.Message) (*pb.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPongMessage", arg0, arg1)
	ret0, _ := ret[0].(*pb.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PingPongMessage indicates an expected call of PingPongMessage.
func (mr *MockRedirectionServerMockRecorder) PingPongMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPongMessage", reflect.TypeOf((*MockRedirectionServer)(nil).PingPongMessage), arg0, arg1)
}

// RemoveUser mocks base method.
func (m *MockRedirectionServer) RemoveUser(arg0 context.Context, arg1 *pb.User) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockRedirectionServerMockRecorder) RemoveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockRedirectionServer)(nil).RemoveUser), arg0, arg1)
}

// SetInfo mocks base method.
func (m *MockRedirectionServer) SetInfo(arg0 context.Context, arg1 *pb.RedirectData) (*pb.OrgUrl, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInfo", arg0, arg1)
	ret0, _ := ret[0].(*pb.OrgUrl)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetInfo indicates an expected call of SetInfo.
func (mr *MockRedirectionServerMockRecorder) SetInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInfo", reflect.TypeOf((*MockRedirectionServer)(nil).SetInfo), arg0, arg1)
}

// SetUser mocks base method.
func (m *MockRedirectionServer) SetUser(arg0 context.Context, arg1 *pb.User) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", arg0, arg1)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUser indicates an expected call of SetUser.
func (mr *MockRedirectionServerMockRecorder) SetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockRedirectionServer)(nil).SetUser), arg0, arg1)
}

// MockUnsafeRedirectionServer is a mock of UnsafeRedirectionServer interface.
type MockUnsafeRedirectionServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRedirectionServerMockRecorder
}

// MockUnsafeRedirectionServerMockRecorder is the mock recorder for MockUnsafeRedirectionServer.
type MockUnsafeRedirectionServerMockRecorder struct {
	mock *MockUnsafeRedirectionServer
}

// NewMockUnsafeRedirectionServer creates a new mock instance.
func NewMockUnsafeRedirectionServer(ctrl *gomock.Controller) *MockUnsafeRedirectionServer {
	mock := &MockUnsafeRedirectionServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRedirectionServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRedirectionServer) EXPECT() *MockUnsafeRedirectionServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRedirectionServer mocks base method.
func (m *MockUnsafeRedirectionServer) mustEmbedUnimplementedRedirectionServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRedirectionServer")
}

// mustEmbedUnimplementedRedirectionServer indicates an expected call of mustEmbedUnimplementedRedirectionServer.
func (mr *MockUnsafeRedirectionServerMockRecorder) mustEmbedUnimplementedRedirectionServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRedirectionServer", reflect.TypeOf((*MockUnsafeRedirectionServer)(nil).mustEmbedUnimplementedRedirectionServer))
}
